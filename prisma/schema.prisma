// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  instructions  Instruction[]  // 用户的私人指令
  templates     Template[]
  reviews       TemplateReview[]
  favorites     UserFavoriteTemplate[]
  blockUsages   UserBlockUsage[]
  userSessions  UserSession[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  isUsed     Boolean  @default(false)

  @@unique([identifier, token])
}

// user private instruction model
model Instruction {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String   @db.Text // actual prompt content
  tags        String[] // search tags
  flowData    Json?    // React Flow nodes and edges data
  
  // user relation
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // usage statistics
  usageCount  Int      @default(0)
  lastUsedAt  DateTime?
  
  // publish status
  isPublished       Boolean  @default(false) // whether published to template library
  publishedTemplate Template? @relation("InstructionToTemplate") // published template
  publishedAt       DateTime? // publish time
  
  // category and tags
  category    String?  // category
  isFavorite  Boolean  @default(false) // whether user has favorited
  
  // draft status
  isDraft     Boolean  @default(false) // whether is draft
  sourceId    String?  // if from template, record source template ID
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
  @@index([category])
  @@index([isPublished])
  @@index([isDraft])
}

model Template {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  useCases    String[] // Array of strings for use cases
  content     String   @db.Text // The actual prompt content
  overview    String?  @db.Text
  features    String[] // Array of features
  isPublic    Boolean  @default(false)
  isPremium   Boolean  @default(false)
  tags        String[] // Searchable tags
  flowData    Json?    // React Flow nodes and edges data
  
  // Analytics
  usageCount  Int      @default(0)
  rating      Float?   // Average rating from 1-5

  ratingCount Int      @default(0)
  
  // Ownership
  createdBy   String?  // User ID, null for system templates
  creator     User?    @relation(fields: [createdBy], references: [id], onDelete: SetNull)
  
  // relation to Instruction (if from instruction)
  sourceInstructionId String?     @unique
  sourceInstruction   Instruction? @relation("InstructionToTemplate", fields: [sourceInstructionId], references: [id], onDelete: SetNull)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  examples    TemplateExample[]
  reviews     TemplateReview[]
  favorites   UserFavoriteTemplate[]
  
  @@index([category])
  @@index([isPublic])
  @@index([createdBy])
}

model TemplateExample {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  templateId String
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  createdAt  DateTime @default(now())
}

model TemplateReview {
  id         String   @id @default(cuid())
  rating     Int      // 1-5 stars
  comment    String?  @db.Text
  templateId String
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt  DateTime @default(now())
  
  @@unique([templateId, userId]) // One review per user per template
}

model UserFavoriteTemplate {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateId String
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  createdAt  DateTime @default(now())
  
  @@unique([userId, templateId])
}

// user block usage statistics
model UserBlockUsage {
  id         String   @id @default(cuid())
  userId     String
  blockType  String
  usageCount Int      @default(1)
  lastUsed   DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, blockType])
  @@index([blockType])
}

// user session record (for collaborative filtering)
model UserSession {
  id            String   @id @default(cuid())
  userId        String
  sessionId     String   @unique
  blockSequence String[] // 用户添加块的顺序
  completedAt   DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}